[{"name":"app.R","content":"library(shiny)\r\nlibrary(bslib)\r\nlibrary(ggplot2)\r\n\r\nui <- fluidPage(\r\n  theme = bslib::bs_theme(bootswatch = \"lux\"),\r\n  titlePanel(\r\n    h1(\"Central Limit Theorm\", align = \"center\")\r\n  ),\r\n  fluidRow(\r\n    column(10,\r\n           align=\"center\",\r\n    span(\"The sampling distribution of the mean will always be normally distributed, as long as the sample size is large enough.\")\r\n    ),\r\n    column(2,\r\n           align=\"center\",\r\n           HTML(\"<span>Created by <a href='https://zehuiyin.github.io/' target='_blank'>Zehui Yin<\/a><\/span>\")\r\n    ),\r\n  ),\r\n  fluidRow(\r\n    column(6,\r\n           align=\"center\",\r\n           selectInput(\"pop_dist\", \"Data Generating Process\", \r\n                       choices = c(\r\n                         \"Normal Distribution\" = \"norm\",\r\n                         \"Uniform Distribution\" = \"unif\",\r\n                         \"Poisson Distribution\" = \"poiss\",\r\n                         \"Chi-squared distribution\" = \"chiq\",\r\n                         \"F-distribution\" = \"F\"\r\n                       ),\r\n                       selected = \"unif\"\r\n                       )\r\n    ),\r\n    column(6,\r\n           align=\"center\",\r\n      sliderInput(\"sample_size\", \"Sample Size\", min = 0, max = 500, value = 50)\r\n    )\r\n  ),\r\n  fluidRow(\r\n    column(6,\r\n           align=\"center\",\r\n           sliderInput(\"para1\", \"Min/Mean/lambda/df1\", min = 0, max = 30, value = 5)\r\n    ),\r\n    column(6,\r\n           align=\"center\",\r\n           sliderInput(\"para2\", \"Max/SD/df2\", min = 0, max = 30, value = 10)\r\n    )\r\n  ),\r\n  fluidRow(\r\n    column(4,\r\n           align=\"center\",\r\n           plotOutput(\"one_hist_sample\")\r\n    ),\r\n    column(4,\r\n           align=\"center\",\r\n      plotOutput(\"hist_sample_mean\")\r\n    ),\r\n    column(4,\r\n           align=\"center\",\r\n      plotOutput(\"qq_sample_mean\")\r\n    )\r\n  )\r\n)\r\n\r\nserver <- function(input, output, session) {\r\n  samples <- reactive({\r\n    req(input$pop_dist)\r\n    \r\n    if (input$pop_dist == \"norm\") {\r\n      data <- data.frame(\r\n        x = sample(rnorm(input$sample_size,\r\n                         mean = input$para1,\r\n                         sd = input$para2))\r\n      )\r\n    }\r\n    \r\n    if (input$pop_dist == \"unif\") {\r\n      data <- data.frame(\r\n        x = sample(runif(input$sample_size,\r\n                         min = input$para1,\r\n                         max = input$para2))\r\n      )\r\n    }\r\n    \r\n    if (input$pop_dist == \"poiss\") {\r\n      data <- data.frame(\r\n        x = sample(rpois(input$sample_size,\r\n                         lambda = input$para1))\r\n      )\r\n    }\r\n    \r\n    if (input$pop_dist == \"chiq\") {\r\n      data <- data.frame(\r\n        x = sample(rchisq(input$sample_size,\r\n                          df = input$para1))\r\n      )\r\n    }\r\n    \r\n    if (input$pop_dist == \"F\") {\r\n      data <- data.frame(\r\n        x = sample(rf(input$sample_size,\r\n                      df1 = input$para1,\r\n                      df2 = input$para2))\r\n      )\r\n    }\r\n    \r\n    data\r\n  })\r\n  \r\n  means <- reactive({\r\n    req(input$pop_dist)\r\n    \r\n    if (input$pop_dist == \"norm\") {\r\n      data <- data.frame(\r\n        x = replicate(1e4, mean(sample(rnorm(input$sample_size,\r\n                         mean = input$para1,\r\n                         sd = input$para2))))\r\n      )\r\n    }\r\n    \r\n    if (input$pop_dist == \"unif\") {\r\n      data <- data.frame(\r\n        x = replicate(1e4, mean(sample(runif(input$sample_size,\r\n                         min = input$para1,\r\n                         max = input$para2))))\r\n      )\r\n    }\r\n    \r\n    if (input$pop_dist == \"poiss\") {\r\n      data <- data.frame(\r\n        x = replicate(1e4, mean(sample(rpois(input$sample_size,\r\n                         lambda = input$para1))))\r\n      )\r\n    }\r\n    \r\n    if (input$pop_dist == \"chiq\") {\r\n      data <- data.frame(\r\n        x = replicate(1e4, mean(sample(rchisq(input$sample_size,\r\n                          df = input$para1))))\r\n      )\r\n    }\r\n    \r\n    if (input$pop_dist == \"F\") {\r\n      data <- data.frame(\r\n        x = replicate(1e4, mean(sample(rf(input$sample_size,\r\n                      df1 = input$para1,\r\n                      df2 = input$para2))))\r\n      )\r\n    }\r\n    \r\n    data\r\n  })\r\n  \r\n  output$one_hist_sample <- renderPlot({\r\n    ggplot(samples(), aes(x = x)) + \r\n      geom_histogram(bins = round(log(input$sample_size,2)+1)) +\r\n      labs(x = \"Data Values\",\r\n           y = \"Frequencies\",\r\n           title = \"Histogram of One Sample\") +\r\n      theme(panel.background = element_blank(),\r\n            panel.border = element_rect(color = \"black\", fill = NA),\r\n            plot.title = element_text(hjust = 0.5))\r\n  })\r\n  \r\n  output$hist_sample_mean <- renderPlot({\r\n    ggplot(means(), aes(x = x)) + \r\n      geom_histogram(bins = round(log(1e4,2)+1)) +\r\n      labs(x = \"Sample Means\",\r\n           y = \"Frequencies\",\r\n           title = \"Histogram of Sample Means\") +\r\n      theme(panel.background = element_blank(),\r\n            panel.border = element_rect(color = \"black\", fill = NA),\r\n            plot.title = element_text(hjust = 0.5))\r\n  })\r\n  \r\n  output$qq_sample_mean <- renderPlot({\r\n    ggplot(means(), aes(sample = x)) + \r\n      stat_qq() +stat_qq_line() +\r\n      labs(x = \"Theotical Quantiles\",\r\n           y = \"Sample Quantiles\",\r\n           title = \"Normal Quantile Plot\") +\r\n      theme(panel.background = element_blank(),\r\n            panel.border = element_rect(color = \"black\", fill = NA),\r\n            plot.title = element_text(hjust = 0.5))\r\n  })\r\n}\r\n\r\nshinyApp(ui, server)\r\n","type":"text"}]
